pipeline {
    agent none
    environment {
        // Retrieve credentials from Jenkins' credentials store
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id') // Jenkins credentials ID
        DB_CREDENTIALS = credentials('db-credentials-id') // Jenkins credentials ID for DB credentials
        BACKEND_IMAGE = "${env.DOCKERHUB_CREDENTIALS_USR}/backend:latest"
        FRONTEND_IMAGE = "${env.DOCKERHUB_CREDENTIALS_USR}/frontend:latest"
    }
    stages {
        stage('Front-end') {
            agent {
                docker { image 'node:16-alpine' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    script {
                        sh '''
                        echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
                        docker build -t ${FRONTEND_IMAGE} ./frontend
                        docker push ${FRONTEND_IMAGE}
                        '''
                    }
                }
                sh 'node --version'
            }
        }
        stage('Back-end') {
            agent {
                docker { image 'maven:3.8.1-adoptopenjdk-11' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    script {
                        sh '''
                        echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
                        docker build -t ${BACKEND_IMAGE} ./backend
                        docker push ${BACKEND_IMAGE}
                        '''
                    }
                }
                sh 'mvn --version'
            }
        }
        stage('Set Up MySQL') {
            agent {
                docker { image 'mysql:8' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'db-credentials-id', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASS')]) {
                    script {
                        // Run MySQL container with credentials
                        sh '''
                        docker run --name mysql-db -e MYSQL_ROOT_PASSWORD=${DB_PASS} -e MYSQL_DATABASE=mydb -d mysql:8
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Clean up Docker containers and images
                sh '''
                docker stop mysql-db || true
                docker rm mysql-db || true
                docker system prune -af
                '''
            }
        }
    }
}

